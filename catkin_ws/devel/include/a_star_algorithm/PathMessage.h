// Generated by gencpp from file a_star_algorithm/PathMessage.msg
// DO NOT EDIT!


#ifndef A_STAR_ALGORITHM_MESSAGE_PATHMESSAGE_H
#define A_STAR_ALGORITHM_MESSAGE_PATHMESSAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace a_star_algorithm
{
template <class ContainerAllocator>
struct PathMessage_
{
  typedef PathMessage_<ContainerAllocator> Type;

  PathMessage_()
    : id(0)
    , sizeOfNodes(0)
    , path()  {
    }
  PathMessage_(const ContainerAllocator& _alloc)
    : id(0)
    , sizeOfNodes(0)
    , path(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _sizeOfNodes_type;
  _sizeOfNodes_type sizeOfNodes;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _path_type;
  _path_type path;





  typedef boost::shared_ptr< ::a_star_algorithm::PathMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::a_star_algorithm::PathMessage_<ContainerAllocator> const> ConstPtr;

}; // struct PathMessage_

typedef ::a_star_algorithm::PathMessage_<std::allocator<void> > PathMessage;

typedef boost::shared_ptr< ::a_star_algorithm::PathMessage > PathMessagePtr;
typedef boost::shared_ptr< ::a_star_algorithm::PathMessage const> PathMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::a_star_algorithm::PathMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::a_star_algorithm::PathMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::a_star_algorithm::PathMessage_<ContainerAllocator1> & lhs, const ::a_star_algorithm::PathMessage_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.sizeOfNodes == rhs.sizeOfNodes &&
    lhs.path == rhs.path;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::a_star_algorithm::PathMessage_<ContainerAllocator1> & lhs, const ::a_star_algorithm::PathMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace a_star_algorithm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::a_star_algorithm::PathMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::a_star_algorithm::PathMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::a_star_algorithm::PathMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::a_star_algorithm::PathMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::a_star_algorithm::PathMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::a_star_algorithm::PathMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::a_star_algorithm::PathMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "126cd8f525eab64ba326556281e7f16a";
  }

  static const char* value(const ::a_star_algorithm::PathMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x126cd8f525eab64bULL;
  static const uint64_t static_value2 = 0xa326556281e7f16aULL;
};

template<class ContainerAllocator>
struct DataType< ::a_star_algorithm::PathMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a_star_algorithm/PathMessage";
  }

  static const char* value(const ::a_star_algorithm::PathMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::a_star_algorithm::PathMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"int32 sizeOfNodes\n"
"int32[] path\n"
;
  }

  static const char* value(const ::a_star_algorithm::PathMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::a_star_algorithm::PathMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.sizeOfNodes);
      stream.next(m.path);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PathMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::a_star_algorithm::PathMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::a_star_algorithm::PathMessage_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "sizeOfNodes: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sizeOfNodes);
    s << indent << "path[]" << std::endl;
    for (size_t i = 0; i < v.path.size(); ++i)
    {
      s << indent << "  path[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.path[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // A_STAR_ALGORITHM_MESSAGE_PATHMESSAGE_H
