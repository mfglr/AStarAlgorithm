// Generated by gencpp from file a_star_algorithm/platformMessage.msg
// DO NOT EDIT!


#ifndef A_STAR_ALGORITHM_MESSAGE_PLATFORMMESSAGE_H
#define A_STAR_ALGORITHM_MESSAGE_PLATFORMMESSAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace a_star_algorithm
{
template <class ContainerAllocator>
struct platformMessage_
{
  typedef platformMessage_<ContainerAllocator> Type;

  platformMessage_()
    : size(0)
    , data()
    , start()
    , end()  {
    }
  platformMessage_(const ContainerAllocator& _alloc)
    : size(0)
    , data(_alloc)
    , start(_alloc)
    , end(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _size_type;
  _size_type size;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _data_type;
  _data_type data;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _start_type;
  _start_type start;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _end_type;
  _end_type end;





  typedef boost::shared_ptr< ::a_star_algorithm::platformMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::a_star_algorithm::platformMessage_<ContainerAllocator> const> ConstPtr;

}; // struct platformMessage_

typedef ::a_star_algorithm::platformMessage_<std::allocator<void> > platformMessage;

typedef boost::shared_ptr< ::a_star_algorithm::platformMessage > platformMessagePtr;
typedef boost::shared_ptr< ::a_star_algorithm::platformMessage const> platformMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::a_star_algorithm::platformMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::a_star_algorithm::platformMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::a_star_algorithm::platformMessage_<ContainerAllocator1> & lhs, const ::a_star_algorithm::platformMessage_<ContainerAllocator2> & rhs)
{
  return lhs.size == rhs.size &&
    lhs.data == rhs.data &&
    lhs.start == rhs.start &&
    lhs.end == rhs.end;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::a_star_algorithm::platformMessage_<ContainerAllocator1> & lhs, const ::a_star_algorithm::platformMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace a_star_algorithm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::a_star_algorithm::platformMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::a_star_algorithm::platformMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::a_star_algorithm::platformMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::a_star_algorithm::platformMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::a_star_algorithm::platformMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::a_star_algorithm::platformMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::a_star_algorithm::platformMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6bc147b333d921576cde564f05a07c0b";
  }

  static const char* value(const ::a_star_algorithm::platformMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6bc147b333d92157ULL;
  static const uint64_t static_value2 = 0x6cde564f05a07c0bULL;
};

template<class ContainerAllocator>
struct DataType< ::a_star_algorithm::platformMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a_star_algorithm/platformMessage";
  }

  static const char* value(const ::a_star_algorithm::platformMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::a_star_algorithm::platformMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 size\n"
"int8[] data\n"
"int8[] start\n"
"int8[] end\n"
;
  }

  static const char* value(const ::a_star_algorithm::platformMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::a_star_algorithm::platformMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.size);
      stream.next(m.data);
      stream.next(m.start);
      stream.next(m.end);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct platformMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::a_star_algorithm::platformMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::a_star_algorithm::platformMessage_<ContainerAllocator>& v)
  {
    s << indent << "size: ";
    Printer<int8_t>::stream(s, indent + "  ", v.size);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "start[]" << std::endl;
    for (size_t i = 0; i < v.start.size(); ++i)
    {
      s << indent << "  start[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.start[i]);
    }
    s << indent << "end[]" << std::endl;
    for (size_t i = 0; i < v.end.size(); ++i)
    {
      s << indent << "  end[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.end[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // A_STAR_ALGORITHM_MESSAGE_PLATFORMMESSAGE_H
