// Generated by gencpp from file a_star_algorithm/GridMessage.msg
// DO NOT EDIT!


#ifndef A_STAR_ALGORITHM_MESSAGE_GRIDMESSAGE_H
#define A_STAR_ALGORITHM_MESSAGE_GRIDMESSAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace a_star_algorithm
{
template <class ContainerAllocator>
struct GridMessage_
{
  typedef GridMessage_<ContainerAllocator> Type;

  GridMessage_()
    : size(0)
    , grid()  {
    }
  GridMessage_(const ContainerAllocator& _alloc)
    : size(0)
    , grid(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _size_type;
  _size_type size;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _grid_type;
  _grid_type grid;





  typedef boost::shared_ptr< ::a_star_algorithm::GridMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::a_star_algorithm::GridMessage_<ContainerAllocator> const> ConstPtr;

}; // struct GridMessage_

typedef ::a_star_algorithm::GridMessage_<std::allocator<void> > GridMessage;

typedef boost::shared_ptr< ::a_star_algorithm::GridMessage > GridMessagePtr;
typedef boost::shared_ptr< ::a_star_algorithm::GridMessage const> GridMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::a_star_algorithm::GridMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::a_star_algorithm::GridMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::a_star_algorithm::GridMessage_<ContainerAllocator1> & lhs, const ::a_star_algorithm::GridMessage_<ContainerAllocator2> & rhs)
{
  return lhs.size == rhs.size &&
    lhs.grid == rhs.grid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::a_star_algorithm::GridMessage_<ContainerAllocator1> & lhs, const ::a_star_algorithm::GridMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace a_star_algorithm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::a_star_algorithm::GridMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::a_star_algorithm::GridMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::a_star_algorithm::GridMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::a_star_algorithm::GridMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::a_star_algorithm::GridMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::a_star_algorithm::GridMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::a_star_algorithm::GridMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c0a5d0669a4de9c73b3b64e22ac14b51";
  }

  static const char* value(const ::a_star_algorithm::GridMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc0a5d0669a4de9c7ULL;
  static const uint64_t static_value2 = 0x3b3b64e22ac14b51ULL;
};

template<class ContainerAllocator>
struct DataType< ::a_star_algorithm::GridMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a_star_algorithm/GridMessage";
  }

  static const char* value(const ::a_star_algorithm::GridMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::a_star_algorithm::GridMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 size\n"
"int32[] grid\n"
;
  }

  static const char* value(const ::a_star_algorithm::GridMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::a_star_algorithm::GridMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.size);
      stream.next(m.grid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GridMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::a_star_algorithm::GridMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::a_star_algorithm::GridMessage_<ContainerAllocator>& v)
  {
    s << indent << "size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.size);
    s << indent << "grid[]" << std::endl;
    for (size_t i = 0; i < v.grid.size(); ++i)
    {
      s << indent << "  grid[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.grid[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // A_STAR_ALGORITHM_MESSAGE_GRIDMESSAGE_H
